 (function() {
     function AllCtrl($firebaseArray, Message) { //services injected

         var rootRef = new Firebase("https://lfdoganblocitoff.firebaseio.com/");    // Root Firebase reference  
         // Child firebase database references
         var currentMessageRef = rootRef.child('currentMessage'); //location of database holding latest message
         var allMessagesRef = rootRef.child('allMessages'); //location of database holding all messages
         //var simpleMessagesRef = rootRef.child('simpleMessages'); // location for a list of messages

         
         
         
         var lblCurrentMessage = document.getElementById('lblCurrentMessage'); //label on undo button shows latest message
         var txtNewMessage = document.getElementById('txtNewMessage'); //input text for new message
         var btnUpdateMessage = document.getElementById('btnUpdateMessage'); //update button for new messae
         var btnUndo = document.getElementById('btnUndo'); //undo button to remove latest message         
         
         
//variables accessed by the html page as all.<variable> where it is defined here as this.<variable>
         this.title = "All Tasks"; 
         // the ARRAY of objects from the allMessages Firebase database
         this.allMessages = Message.all();

         this.Message = Message;


         
         
         
         
            // Attach an asynchronous callback to read all of the data at our allMessages reference. This function will be called anytime new data is added to our database reference, and we don't need to write any extra code to make this happen.
         // "value" parameter reads the entire contents of a Firebase database reference
/*
            allMessagesRef.on("value", function(snapshot) {
                console.log(snapshot.val());//shows Object {<uID>: "hunting", <uID>: fishing...}
            }, function (errorObject) {
                console.log("The read failed: " + errorObject.code);
            });
 */                    
         
         

         
         
         
         
//COPIED TO MESSAGE.JS
          //function calcDueDate receives a date in total number of milliseconds
         //this.calcDueDate called in html as all.calcDueDate
         this.calcDueDate = function(dateEntered){
             // 1,000 ms in a second; 60s in a minute
             //var dueDate1s = dateEntered + 6000 //dueDate in 1 second
             //var dueDate = dateEntered + 60000 //dueDate in 1 minute
             //var dueDate = dateEntered + 3.6e+6 //dueDate in 1 hour
             //var dueDate = dateEntered + 8.64e+7 //dueDate in 1 day
             var dueDate = dateEntered + ((8.64e+7)*3) //dueDate in 3 days
             //var dueDate = dateEntered + 6.048e+8 //dueDate in 1 week
             return dueDate;
         };

         
         
         
//COPIED TO MESSAGE.JS     
         // function calcOverdue() takes in a date/time (a number in the form of milliseconds)
         // calculates the difference between the dueDate and current date/time
         //can't use Firebase.ServerValue.TIMESTAMP here because it only works when writing to Firebase via .set(), .push() etc
         // if the difference is positive the task is still current, if negative it has passed the deadline to be completed
         //this.calcOverdue called in html as all.calcOverdue
         this.calcOverdue = function(dueDate){
             var difference = dueDate - new Date().getTime();
             if (difference > 0)
                 return false; //not yet due, active
             else
                 return true; //overdue, inactive
         };
         

                  


         
         //when user clicks on update button... save to firebase:
         //.set() replaces previous value of 'currentMessage' child with new value from input box
         //.push() adds a new unique key and new value to 'allMessages' child. Generate a reference to a new location and add some data using push(). Calling push() will return a reference to the new data path, which you can use to get the value of its ID or set data to it. 
         // Get the unique ID generated by push(). Calling key() on our push() reference gives us the value of the unique ID.
         // Clear out value of input textbox to empty to prepare for next entry
         // updateUI(): Update the UI by showing newly added message      
         var postID;
         var newPostRef;
         btnUpdateMessage.addEventListener('click', function(){
             console.log("UPDATE");
          //check for value of radio button and assign to variable txtPriority
             if (document.getElementById('prLow').checked) {
                 var txtPriority = document.getElementById('prLow').value;
             } else if (document.getElementById('prHigh').checked) {
                 var txtPriority = document.getElementById('prHigh').value;
             } else {
                 var txtPriority = document.getElementById('prMed').value;
             };
             currentMessageRef.set(txtNewMessage.value);
             //simpleMessagesRef.push(txtNewMessage.value);
             newPostRef = allMessagesRef.push();
             newPostRef.set({
              value: txtNewMessage.value, //the task entered by user
              priority: txtPriority, // user entered priority for task
              completed: false, //false for not completed
              dateAdded: Firebase.ServerValue.TIMESTAMP // record the time when task was entered
          });
          postID = newPostRef.key();        
          txtNewMessage.value = '';
          updateUI();
         });
         
         

         
         
         

         
         //when user clicks on the undo button... remove latest database entry
         // key() gets the unique ID from the most recent entry and adds it to the url of all messages database location
         // remove() removes the url of last entry of allMessages child. remove() is equivalent to calling set(null).
         // set() changes the value of currentMessage child to empty.
         // updateUI(): Update the UI by showing newly added message
         btnUndo.addEventListener('click', function(){
             console.log("UNDO");
             //console.log(newPostRef); //the object (ex: U {k: Yh, path: L, n: ae, lc: false})
             var lastMessage = allMessagesRef.child(newPostRef.key());
             lastMessage.remove();
             currentMessageRef.set(''); 
             updateUI();
         });

         
         
         
         
         
         
         
         
         // function updateUI() will sync data in user interface.
         // listen for a change in the current message value by using on() method on current message reference. whenever value changes the callback function fires with new snapshot from firebase. call val() function to get data from snapshot.
         //Calling val() on a snapshot returns the JavaScript object representation of the data. If no data exists at the reference's location, the snapshots value will be null.
         var updateUI = function(){
             currentMessageRef.on('value', function(snapshot){
                 lblCurrentMessage.innerText = snapshot.val();
             });
         };      

         
         
         
               
         /*
         * function getTextDeco() called in html for ngRepeat to change text decoration for overdue/completed tasks displayed with strike-through
         * accepts the value 'dateAdded' (number of milliseconds) and the value 'completed'
         * run calcDueDate() for the dateAdded then run calcOverdue() on the result to determine if task is overdue
         * if overdue=true or completed=true then change text-decoration to line-through (strike-through) otherwise no text decoration
         * used only for ALL. won't occur in ACTIVE and all of the COMPLETED will be strike-through so I can set that static
         */
         //this.getTextDeco called in html as all.getTextDeco
         this.getTextDeco = function(date, compl) {
             if ( this.calcOverdue(this.calcDueDate(date)) || compl) {
                 return 'line-through'  // if overdue OR completed
             } else {
                 return 'none'  // if not overdue and not completed
             };
         };
        

         


         
         

         
/*********************************************************************************************************************/         
     }
 
     angular
         .module('blocItOff')
         .controller('AllCtrl', AllCtrl); //array of dependencies contains services and lastly callback function. Inject $firebaseObject and other services into this controller
 })();



/* 1/12/16 when moving functions out of AllCtrl.js into Message.js you must have:
function ActiveCtrl(Message)
this.Message = Message;
.controller('ActiveCtrl', ['Message', ActiveCtrl]);
along with the correct path in the html ( {{ active.Message.labelPriority(message.priority) }} )
*/