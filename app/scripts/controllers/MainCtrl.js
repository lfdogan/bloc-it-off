 (function() {
     function MainCtrl($firebaseArray) { //services injected

         var rootRef = new Firebase("https://lfdoganblocitoff.firebaseio.com/");    // Root Firebase reference  
         // Child firebase database references
         var currentMessageRef = rootRef.child('currentMessage'); //location of database holding latest message
         var allMessagesRef = rootRef.child('allMessages'); //location of database holding all messages
         //var simpleMessagesRef = rootRef.child('simpleMessages'); // location for a list of messages

         
         
         
         var lblCurrentMessage = document.getElementById('lblCurrentMessage'); //label on undo button shows latest message
         var txtNewMessage = document.getElementById('txtNewMessage'); //input text for new message
         var btnUpdateMessage = document.getElementById('btnUpdateMessage'); //update button for new messae
         var btnUndo = document.getElementById('btnUndo'); //undo button to remove latest message         
         
         



         
         
    


         
         //when user clicks on update button... save to firebase:
         //.set() replaces previous value of 'currentMessage' child with new value from input box
         //.push() adds a new unique key and new value to 'allMessages' child. Generate a reference to a new location and add some data using push(). Calling push() will return a reference to the new data path, which you can use to get the value of its ID or set data to it. 
         // Get the unique ID generated by push(). Calling key() on our push() reference gives us the value of the unique ID.
         // Clear out value of input textbox to empty to prepare for next entry
         // updateUI(): Update the UI by showing newly added message      
         var postID;
         var newPostRef;
         btnUpdateMessage.addEventListener('click', function(){
             console.log("UPDATE");
          //check for value of radio button and assign to variable txtPriority
             if (document.getElementById('prLow').checked) {
                 var txtPriority = document.getElementById('prLow').value;
             } else if (document.getElementById('prHigh').checked) {
                 var txtPriority = document.getElementById('prHigh').value;
             } else {
                 var txtPriority = document.getElementById('prMed').value;
             };
             currentMessageRef.set(txtNewMessage.value);
             //simpleMessagesRef.push(txtNewMessage.value);
             newPostRef = allMessagesRef.push();
             newPostRef.set({
                 value: txtNewMessage.value, //the task entered by user
                 priority: txtPriority, // user entered priority for task
                 completed: false, //false for not completed
                 dateAdded: Firebase.ServerValue.TIMESTAMP // record the time when task was entered
             });
             postID = newPostRef.key();
             txtNewMessage.value = '';
             updateUI();
         });
         
         

         
         
         

         
         //when user clicks on the undo button... remove latest database entry
         // key() gets the unique ID from the most recent entry and adds it to the url of all messages database location
         // remove() removes the url of last entry of allMessages child. remove() is equivalent to calling set(null).
         // set() changes the value of currentMessage child to empty.
         // updateUI(): Update the UI by showing newly added message
         btnUndo.addEventListener('click', function(){
             console.log("UNDO");
             //console.log(newPostRef); //the object (ex: U {k: Yh, path: L, n: ae, lc: false})
             var lastMessage = allMessagesRef.child(newPostRef.key());
             lastMessage.remove();
             currentMessageRef.set(''); 
             updateUI();
         });

         
         
         
         
         
         
         
         
         // function updateUI() will sync data in user interface.
         // listen for a change in the current message value by using on() method on current message reference. whenever value changes the callback function fires with new snapshot from firebase. call val() function to get data from snapshot.
         //Calling val() on a snapshot returns the JavaScript object representation of the data. If no data exists at the reference's location, the snapshots value will be null.
         var updateUI = function(){
             
             
             //query of database and prints all tasks created
//             allMessagesRef.orderByChild("priority").on("child_added", function(snapshot) {
//                 console.log(snapshot.key() + " is the key for " + snapshot.val().value + " with priority of " + snapshot.val().priority);
//             });
             

             //query of database and prints only items with a priority = 3 (for limitToLast of 2)
//            allMessagesRef.orderByChild("priority").limitToLast(2).on("child_added", function(snapshot) {
//                console.log(snapshot.key() + " is the key for " + snapshot.val().value + " with priority of " + snapshot.val().priority);
//            });


            //query of database and prints all tasks created
//             allMessagesRef.orderByValue().on("value", function(snapshot) {
//                 snapshot.forEach(function(data) {
//                     console.log("Key is " + data.key() + " for " + data.val().value);
//                 });
//             });
             
             //original text for updating the list but really it didn't actually do anything for my project
//             currentMessageRef.on('value', function(snapshot){
//                 lblCurrentMessage.innerText = snapshot.val();
//             });
         };      

         
         
         



         
         

         
/*********************************************************************************************************************/         
     }
 
     angular
         .module('blocItOff')
         .controller('MainCtrl', MainCtrl); //array of dependencies contains services and lastly callback function. Inject $firebaseObject and other services into this controller
 })();



/* 1/12/16 when moving functions out of AllCtrl.js into Message.js you must have:
function ActiveCtrl(Message)
this.Message = Message;
.controller('ActiveCtrl', ['Message', ActiveCtrl]);
along with the correct path in the html ( {{ active.Message.labelPriority(message.priority) }} )
*/